
version: '3.8'
services:
  rabbitmq:
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_NODENAME=rabbit@localhost
    ports:
      - "5672:5672"  # AMQP port
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 6
      start_period: 30s
    networks:
      - app-network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8007:8080"  # Application port: host 8007 -> container 8080
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - RABBITMQ_HOST=rabbit
      - RABBITMQ_USER=app_user
      - RABBITMQ_PASSWORD=app_password
      - RABBITMQ_VHOST=app_vhost
      - PORT=8080  # Inform main.py to bind to container port 8080
    command: >
      /bin/bash -c "
        rabbitmqctl -n rabbit@localhost wait -q /var/lib/rabbitmq/mnesia/rabbit@localhost.pid ||
          { echo 'RabbitMQ not available'; exit 1; } &&
        rabbitmqctl -n rabbit@localhost add_user app_user app_password ||
          echo 'User already exists' &&
        rabbitmqctl -n rabbit@localhost add_vhost app_vhost ||
          echo 'Vhost already exists' &&
        rabbitmqctl -n rabbit@localhost set_user_tags app_user administrator &&
        rabbitmqctl -n rabbit@localhost set_permissions -p app_vhost app_user '.*' '.*' '.*' ||
          echo 'Failed to set permissions' &&
        uv run python main.py"
    networks:
      - app-network

volumes:
  rabbitmq-data:

networks:
  app-network:
    driver: bridge